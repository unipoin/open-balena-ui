#from https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/github-actions.md
name: Automatic Release
run-name: ${{ github.actor }} is automatically releasing ðŸš€

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPOSITORY: open-balena-ui

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Get token from Github App
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.CREATE_RELEASE_GITHUB_APP_ID }}
          private-key: ${{ secrets.CREATE_RELEASE_GITHUB_APP_KEY }}
          # owner is required, otherwise the creds will fail the checkout step
          owner: ${{ github.repository_owner }}
          repositories: ${{ env.REPOSITORY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app_token.outputs.token }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: |
          npm install --no-fund --no-audit
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: Release
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: npm run release

  publish-docker-image:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [release]
    permissions:
      contents: read
      packages: write
      attestations: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    #        - name: Generate artifact attestation
    #          uses: actions/attest-build-provenance@v1
    #          with:
    #            subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
    #            subject-digest: ${{ steps.push.outputs.digest }}
    #            push-to-registry: true